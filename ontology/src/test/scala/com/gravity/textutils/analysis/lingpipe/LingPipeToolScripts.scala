package com.gravity.textutils.analysis.lingpipe

/**
 * Created by IntelliJ IDEA.
 * Author: Robbie Coleman
 * Date: 5/20/11
 * Time: 7:08 PM
 */
import scala.collection.JavaConversions._

object testTokenize extends App {
  val tokens = LingPipeTool.tokenizeGrams(LingPipeToolIT.text)

  println("Text to tokenize:")
  println(LingPipeToolIT.text)
  println()
  println("Tokens generated by LingPipeTool:")
  tokens.foreach(println(_))
  println()
}

object testTagPOS extends App {
  val tokens = LingPipeTool.tokenizeGrams(LingPipeToolIT.text)

  println("Text to tag:")
  println(LingPipeToolIT.text)

  val posTags = LingPipeTool.tagWithPOS(tokens)

  println()
  println("Tokens and tags [token_TAG] generated by LingPipeTool:")

  for ((token,tag) <- posTags.tokens().zip(posTags.tags())) {
    print("%s_%s ".format(token, tag.toUpperCase))
  }
  println()
  println()
}

object testTagNBest extends App {
  val tokens = LingPipeTool.tokenizeGrams(LingPipeToolIT.text)

  println("Text to tag NBest:")
  println(LingPipeToolIT.text)

  val scoredTags = LingPipeTool.tagNBest(tokens, 4)

  println()
  println("Top 4 probability scored tags generated by LingPipeTool:")
  println("[Probability]:\n\ttoken_TAG...")
  println()

  for (scoredTag <- scoredTags) {
    println("[%s:]".format(scoredTag.score()))

    print("\t")
    for ((token,tag) <- scoredTag.tokens().zip(scoredTag.tags())) {
      print("%s_%s ".format(token, tag.toUpperCase))
    }
    println()
    println()
  }

}

object testTagMaginal extends App {
  val tokens = LingPipeTool.tokenizeGrams(LingPipeToolIT.text)

  println("Text to analyze confidence:")
  println(LingPipeToolIT.text)

  val lattice = LingPipeTool.tagMarginal(tokens)
  println()
  println("#   Token               (Prob:TAG)*")
  for (i <- 0 until tokens.length) {
    val scores = lattice.tokenClassification(i)
    print(LingPipeToolIT.pad(i.toString, 4))
    print(LingPipeToolIT.pad(tokens(i), 15))

    for (j <- 0 until 5) print(" %9.3f:%s".format(scores.score(j), LingPipeToolIT.pad(scores.category(j).toUpperCase, 4)))
    println()
  }
}

object testExtractSentences extends App {
  println("Extracting senetences from this text:")
  println(LingPipeToolIT.text)
  println()
  val sentences = LingPipeTool.extractSentences(LingPipeToolIT.text)
  println(sentences.length + " Sentences Extracted")
  sentences.zipWithIndex.foreach{ case (sent,i) => {
    println("#%d (%d-%d): %s".format(i + 1, sent.start, sent.end, sent.sentence))
  }}
}

object testExtractPhrases extends App {
  println("Extracting phrases from this text:")
  println(LingPipeToolIT.text)
  val phrases = LingPipeTool.extractPhrases(LingPipeToolIT.text, 2, 4)
  println(phrases.length + " phrases extracted")
  phrases.zipWithIndex.foreach{ case (phrase,i) => {
    printf("#%d: %s%n\tGrams: %d%n\tStart: %d; End: %d%n\tAppears at: %.3f %%%n\tPOS Tokens:%n", i + 1, phrase.phrase, phrase.gramSize, phrase.startIndex, phrase.endIndex, phrase.appearsAt * 100)
    for (posTok <- phrase.posTokens) {
      printf("\t\tToken: \"%s\" --> Tag: %s%n", posTok.token, posTok.posTag)
    }
    println()
  } }

}

object testGetChunks extends App {
  println("Extracting Chunks from this text:")
  println(LingPipeToolIT.text)

  val results = LingPipeTool.getChunks(LingPipeToolIT.text)
  println("Extracted %d chunks".format(results.size()))

  results.zipWithIndex.foreach{ case (chunkAndString, i) => {
    printf("#%d: %s%n\t\tChunk: %s%n%n", i + 1, chunkAndString.span(), chunkAndString.chunk().`type`())
  }}
}

object LingPipeToolIT {
  def text = "Here is a very simple sentence in which one may run many tests with. I may in fact tokenize this text right about now!\n" +
    "How about when whitespace is a new line? Shouldn't that make this a little more interesting?\n\t" +
    "Well... If not, then the tab character will."
  
  def pad(in: String, len: Int): String = {
    if (in.length() == len) return in
    if (in.length() > len) return in.substring(0, len - 3) + "..."

    val sb = new StringBuilder
    sb.append(in)
    while (sb.length < len) sb.append(" ")
    sb.toString()
  }
}